// docs/.vitepress/config.js
import VueJsx from "file:///D:/frontEnd/project/custom-component/app/node_modules/.pnpm/registry.npmmirror.com+@vitejs+plugin-vue-jsx@3.0.2_vite@4.4.9_vue@3.3.4/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import { defineConfig } from "file:///D:/frontEnd/project/custom-component/app/node_modules/.pnpm/vitepress@1.0.0-rc.4_@algolia+client-search@4.19.1_axios@1.5.0_change-case@4.1.2_sass@1.66.1_search-insights@2.13.0/node_modules/vitepress/dist/node/index.js";
import { demoblockPlugin, demoblockVitePlugin } from "file:///D:/frontEnd/project/custom-component/app/node_modules/.pnpm/vitepress-theme-demoblock@3.0.3_@algolia+client-search@4.19.1_axios@1.5.0_change-case@4.1.2_s_r7n5372dggfqn5h7tfo34c7sia/node_modules/vitepress-theme-demoblock/dist/node/index.mjs";

// docs/.vitepress/config/nav.js
var nav = [
  { text: "\u9996\u9875", link: "/" },
  { text: "\u6587\u6863", link: "/doc/" },
  { text: "\u7EC4\u4EF6", link: "/components/" }
];

// docs/.vitepress/config/sidebar.js
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
var __vite_injected_original_import_meta_url = "file:///D:/frontEnd/project/custom-component/app/apps/doc/docs/.vitepress/config/sidebar.js";
var __dirname = path.dirname(fileURLToPath(__vite_injected_original_import_meta_url));
console.log("__dirname", __dirname);
var rootDirectory = path.resolve(__dirname, "../../");
var docsPath = path.dirname(rootDirectory);
function generateSidebarConfig(docsPath2, link = "", depth = 0) {
  const sidebarConfig = depth === 0 ? {} : { items: [] };
  const files = fs.readdirSync(docsPath2).filter((file) => !file.startsWith("."));
  files.forEach((filename) => {
    const filepath = path.join(docsPath2, filename);
    if (isDirectory(filepath)) {
      handleDirectory(filepath, filename, depth, sidebarConfig, link);
    } else {
      handleFile(filepath, filename, depth, sidebarConfig, link);
    }
  });
  return sidebarConfig;
}
function isDirectory(filepath) {
  return fs.statSync(filepath).isDirectory();
}
function handleDirectory(filepath, filename, depth, sidebarConfig, link) {
  const newLink = depth === 0 ? `/${filename}/` : `${link}${filename}/`;
  const config = generateSidebarConfig(filepath, newLink, depth + 1);
  if (depth === 0) {
    sidebarConfig[newLink] = [config];
  } else {
    sidebarConfig.items.push(config);
  }
}
function handleFile(filepath, filename, depth, sidebarConfig, link) {
  if (filename === "index.md" && depth > 0) {
    sidebarConfig.text = path.basename(path.dirname(filepath));
    sidebarConfig.link = link;
  } else if (path.extname(filename) === ".md" && filename !== "index.md") {
    const basename = path.basename(filename, ".md");
    sidebarConfig.items.push({
      text: basename,
      link: `${link}${basename}`
    });
  }
}
console.log(generateSidebarConfig(docsPath));
var sidebar = generateSidebarConfig(docsPath);

// docs/.vitepress/config.js
var config_default = defineConfig({
  title: "zjwmmx\u4E2A\u4EBA\u535A\u5BA2",
  titleTemplate: ":title - \u6587\u6863\u5E93",
  description: "\u57FA\u4E8Evitepress\u5F00\u53D1\u7684\u6587\u6863\u5E93",
  cleanUrls: true,
  // 访问路径,去掉.html扩展名
  head: [["link", { rel: "icon", href: "/favicon.png" }]],
  themeConfig: {
    nav,
    sidebar,
    socialLinks: [{ icon: "github", link: "https://github.com/zjwmmx/mmx-ui" }]
  },
  markdown: {
    config: (md) => {
      md.use(demoblockPlugin);
    }
  },
  vite: {
    plugins: [VueJsx(), demoblockVitePlugin()]
  }
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
